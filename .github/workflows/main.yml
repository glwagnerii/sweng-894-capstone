name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

jobs:
  run-tests:
    permissions:
      contents: write
    strategy:
      fail-fast: false
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm (Windows only)
        run: npm install -g pnpm@8

      - name: install frontend dependencies
        run: pnpm install

      - name: lint
        run: pnpm run lint | tee Code_Report.txt
        continue-on-error: true

      - name: vitest tests and coverage
        run: pnpm run coverage | tee -a Code_Report.txt
        continue-on-error: true

      - name: install backend dependencies
        run: pip install pytest-cov pylint

      - name: pylint
        run: pylint --exit-zero ./python | tee -a Code_Report.txt
        continue-on-error: true

      - name: pytests and coverage
        run: pytest --cov=./python | tee -a Code_Report.txt
        continue-on-error: true

      - name: upload code report
        uses: actions/upload-artifact@v4
        with:
          name: Code_Report
          path: Code_Report.txt
              
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install pnpm (Windows only)
        if: matrix.platform == 'windows-latest'
        run: npm install -g pnpm@8

      - name: Install pnpm (macOS & Ubuntu)
        if: matrix.platform != 'windows-latest'
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: install frontend dependencies
        run: pnpm install

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ClassifiCam-v__VERSION__
          releaseName: 'ClassifiCam v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ClassifiCam-${{ matrix.platform }}
          path: src-tauri/target/release/bundle
